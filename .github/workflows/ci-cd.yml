name: CI/CD Workflows

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  # Test Job
  test:
    name: Run tests
    runs-on: ubuntu-22.04
    steps:
      - name: Check out the Git repository
        uses: actions/checkout@v4

      - name: Set up Java toolchain
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew test

  # PMD Analysis Job
  pmd:
    name: PMD Code Analysis
    runs-on: ubuntu-22.04
    permissions:
      security-events: write
    steps:
      - name: Check out the Git repository
        uses: actions/checkout@v4

      - name: Set up Java toolchain
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Run PMD
        uses: pmd/pmd-github-action@v2
        with:
          version: '7.0.0-rc4'
          sourcePath: 'src/main/java'
          rulesets: 'rulesets/java/quickstart.xml'
          analyzeModifiedFilesOnly: false

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-report.sarif

  # Scorecard Security Analysis Job
  scorecard:
    name: Scorecard analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      id-token: write
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: 'Run analysis'
        uses: ossf/scorecard-action@0864cf19026789058feabb7e87baa5f140aac736 # v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: 'Upload artifact'
        uses: actions/upload-artifact@v4
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      - name: 'Upload to code-scanning'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # Deployment to EC2 Job
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [pmd, scorecard]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x gradlew

      - name: Build with Gradle Kotlin DSL (skip tests)
        run: ./gradlew build -x test

      - name: Confirm JAR exists
        run: ls -lh build/libs

      - name: Copy JAR and Dockerfile to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          source: "build/libs/*.jar,Dockerfile"
          target: /home/ubuntu/app

      - name: SSH and deploy with Docker and create .env
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/app
            
            # Rename JAR file if it exists (assuming only one JAR exists)
            if ls *.jar 1> /dev/null 2>&1; then
              mv *.jar app.jar
            fi
            
            # Install Docker if not installed
            if ! command -v docker &> /dev/null; then
              sudo apt update -y
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo usermod -aG docker ubuntu
            fi
            
            # Create .env file with deployment configuration
            cat <<EOF > .env
            CORS_ALLOWED_ORIGIN=${{ secrets.CORS_ALLOWED_ORIGIN }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EOF
            
            # Deploy using Docker commands
            mv build/libs/*.jar app.jar || true
            sudo docker stop springboot-app || true
            sudo docker rm springboot-app || true
            sudo docker build -t springboot-app .
            sudo docker run -d -p 80:8080 --name springboot-app --env-file .env springboot-app